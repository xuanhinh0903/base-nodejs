import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Test script ƒë·ªÉ ki·ªÉm tra ch·ª©c nƒÉng upload ·∫£nh
async function testUploadAPI() {
  console.log('üß™ B·∫Øt ƒë·∫ßu test API upload ·∫£nh...\n');

  // Test 1: Ki·ªÉm tra server c√≥ ch·∫°y kh√¥ng
  try {
    const response = await fetch('http://localhost:3001/');
    if (response.ok) {
      console.log('‚úÖ Server ƒëang ch·∫°y tr√™n port 3001');
    } else {
      console.log('‚ùå Server kh√¥ng ph·∫£n h·ªìi');
      return;
    }
  } catch (error) {
    console.log('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server:', error.message);
    console.log('üí° H√£y ch·∫°y: npm run dev');
    return;
  }

  // Test 2: Ki·ªÉm tra API docs
  try {
    const response = await fetch('http://localhost:3001/api-docs');
    if (response.ok) {
      console.log('‚úÖ Swagger docs c√≥ s·∫µn t·∫°i: http://localhost:3001/api-docs');
    }
  } catch (error) {
    console.log('‚ùå Kh√¥ng th·ªÉ truy c·∫≠p Swagger docs');
  }

  // Test 3: Ki·ªÉm tra endpoint upload (kh√¥ng c√≥ auth)
  try {
    const response = await fetch('http://localhost:3001/api/upload/single', {
      method: 'POST',
    });

    if (response.status === 401) {
      console.log('‚úÖ Endpoint upload y√™u c·∫ßu authentication (ƒë√∫ng)');
    } else {
      console.log('‚ö†Ô∏è Endpoint upload kh√¥ng y√™u c·∫ßu auth (c√≥ th·ªÉ c√≥ v·∫•n ƒë·ªÅ)');
    }
  } catch (error) {
    console.log('‚ùå Kh√¥ng th·ªÉ test endpoint upload:', error.message);
  }

  console.log('\nüìã H∆∞·ªõng d·∫´n test upload ·∫£nh:');
  console.log('1. ƒêƒÉng nh·∫≠p ƒë·ªÉ l·∫•y token:');
  console.log('   POST http://localhost:3001/api/auth/login');
  console.log(
    '   Body: { "email": "user@example.com", "password": "password" }',
  );

  console.log('\n2. Upload m·ªôt ·∫£nh:');
  console.log('   POST http://localhost:3001/api/upload/single');
  console.log('   Headers: { "Authorization": "Bearer YOUR_TOKEN" }');
  console.log('   Body: FormData v·ªõi field "image"');

  console.log('\n3. Upload nhi·ªÅu ·∫£nh:');
  console.log('   POST http://localhost:3001/api/upload/multiple');
  console.log('   Headers: { "Authorization": "Bearer YOUR_TOKEN" }');
  console.log('   Body: FormData v·ªõi field "images[]"');

  console.log('\n4. Xem ·∫£nh:');
  console.log('   GET http://localhost:3001/api/upload/image/{imageId}');

  console.log('\n5. Xem danh s√°ch ·∫£nh c·ªßa user:');
  console.log('   GET http://localhost:3001/api/upload/my-images');
  console.log('   Headers: { "Authorization": "Bearer YOUR_TOKEN" }');

  console.log('\n6. Xem ·∫£nh public:');
  console.log('   GET http://localhost:3001/api/upload/public');

  console.log('\n7. T√¨m ki·∫øm ·∫£nh:');
  console.log('   GET http://localhost:3001/api/upload/search?q=keyword');

  console.log('\n8. C·∫≠p nh·∫≠t ·∫£nh:');
  console.log('   PUT http://localhost:3001/api/upload/image/{imageId}');
  console.log('   Headers: { "Authorization": "Bearer YOUR_TOKEN" }');
  console.log(
    '   Body: { "description": "New description", "tags": "tag1,tag2", "isPublic": true }',
  );

  console.log('\n9. X√≥a ·∫£nh:');
  console.log('   DELETE http://localhost:3001/api/upload/image/{imageId}');
  console.log('   Headers: { "Authorization": "Bearer YOUR_TOKEN" }');

  console.log('\nüîß C√°c t√≠nh nƒÉng ƒë√£ implement:');
  console.log('‚úÖ Upload ·∫£nh d∆∞·ªõi d·∫°ng buffer');
  console.log('‚úÖ X·ª≠ l√Ω ·∫£nh v·ªõi Sharp (resize, compress)');
  console.log('‚úÖ L∆∞u ·∫£nh v√†o database (BYTEA)');
  console.log('‚úÖ H·ªó tr·ª£ tags v√† description');
  console.log('‚úÖ Tr·∫°ng th√°i public/private');
  console.log('‚úÖ Pagination cho danh s√°ch ·∫£nh');
  console.log('‚úÖ T√¨m ki·∫øm theo tags v√† description');
  console.log('‚úÖ Authentication v√† authorization');
  console.log('‚úÖ Swagger documentation');
  console.log('‚úÖ Error handling');
  console.log('‚úÖ File validation (ch·ªâ ch·∫•p nh·∫≠n ·∫£nh)');
  console.log('‚úÖ File size limit (5MB)');

  console.log('\nüéØ ƒê·ªÉ test v·ªõi Postman:');
  console.log('1. Import collection t·ª´ Swagger docs');
  console.log('2. Set Authorization header v·ªõi Bearer token');
  console.log('3. Upload file trong form-data');
  console.log('4. Test c√°c endpoint kh√°c nhau');

  console.log('\nüìù L∆∞u √Ω:');
  console.log('- ·∫¢nh s·∫Ω ƒë∆∞·ª£c resize v·ªÅ t·ªëi ƒëa 800x800px');
  console.log('- Ch·∫•t l∆∞·ª£ng JPEG ƒë∆∞·ª£c set 80%');
  console.log('- Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (MIME type b·∫Øt ƒë·∫ßu b·∫±ng "image/")');
  console.log('- Gi·ªõi h·∫°n 5MB cho m·ªói file');
  console.log('- T·ªëi ƒëa 10 file cho upload nhi·ªÅu ·∫£nh');
}

// Ch·∫°y test
testUploadAPI().catch(console.error);
